name: Master Template

on: 
  pull_request:
    branches:
      - main
      - dev
  push:
    branches:
      - main
  #Schedule can use a cron expression to trigger a workflow at a specific time of day
  #Only runs on the main branch
  #Runs only once per every 5 minutes
  release:
    types: [published, created]
  #schedule:
    #Runs at 5:30 only on Monday and Wednesday
    #- cron: '30 5 * * 1,3'
    #Runs at 05:30, on day 1 of the month, and on Tuesday and Thursday.
    #- cron: '30 5 1 * 2,4'
    #Runs every 5 minutes (not 3)
    #- cron: '*/3 * * * *'
  #Manual Event
  #Up to 10 inputs
  workflow_dispatch:
    inputs:
      some_variable_name:
        description: 'Some description of the variable'
        required: true
        type: string
      some_other_variable_name:
        description: 'Some description of the variable'
        required: true
        type: string
  #You can trigger a workflow via an external http endpoint.
  #Will only trigger a workflow run if the workflow file is on the default branch

  #Example
  # curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token {your PAT w/ repo access}" \
  #  -d '{"event_type": "webhook", "client_payload": {"key":"value"}}' \ https://api.github.com/repos/....
  #https://github.com/TroyGuessford/Github-Examples
  repository_dispatch:
    types:
      - webhook

jobs:
  Context_Example:
    runs-on: ubuntu-latest
    steps:
      - name: "Display {github.action}"
        env:
          SOME_COOL_ENV_VAR: "Troy"
      - run: echo "Hello! $SOME_COOL_ENV_VAR"
  My_Cool_Job_Name: 
      #Must escape if expression starts with a ! (bang), since ! is reserved notation in YAML
      #if statements can be on the job and/or a step
      if: github.repository != 'TroyGuessford/Github-Examples'
      #Specifying the wrong target here will cause the job to wait for a runner indefinately
      #runs-on: ubuntu-latets
      runs-on: ubuntu-latest
      steps:
        #Displays the server time to the workflow log
        - name: Do Work Son
          run: echo "The current server time is $(date)"
        #Checkout the main? branch
        - uses: actions/checkout@v2
        - name: Use The Input
          run: echo "You entered ${{ inputs.some_variable_name }} for the first variable and
            ${{ inputs.some_other_variable_name }} for the second variable."
        #Displays any client payload data that is supplied from the repository_dispatch
        - name: Repo Dispatch
          run: 'echo "You entered ${{ toJson(github.event.client_payload) }}"'
        - name: Repo Dispatch 2
          run: 'echo "You entered ${{ github.event.client_payload.key }}"'
        #Set Env Vars
        - name: Set environment varible
          run: echo "ACTION_ENV=production" >> $GITHUB_ENV
        - name: Adding to System Path
          run: echo "/path/to/dir" >> $GITHUB_PATH
        #Set Output to use in another job
        - name: Set Output
          id: example_step #required if accessed
          run: echo "result=output_value" >> $GITHUB_OUTPUT
        #Use Output from another job
        - name: Use Output
          run: echo "The output was ${{ steps.example_step.outputs.result }}"
        - name: Create debug message
          run: echo "::debug::This is a debug message"


#functions
# contains(searchString, searchValue)
# startwWith(searchString, searchValue)
# endsWith(searchString, searchValue)
# format(string, replaceValue 0...N)
# join(array, optionalSeparator)
# toJSON(value)
# fromJSON(value)
# hashFiles(path)

#Status Check Functions
# success()
# always()
# cancelled()
# failure()

#runs-on: 
# ubuntu-latest
# ubuntu-22.04
# windows-latest
# windows-2022
# windows-2019
# macos-latest
# macos-14

#contexts
# github
# env
# vars
# job
# jobs
# steps
# runner
# secrets
# strategy
# matrix
# needs
# inputs
